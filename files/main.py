import customtkinter as ctk
from customtkinter import filedialog

import json
import re
import os
import requests
from PIL import Image
import easyocr
import pdfplumber
import cv2
import numpy as np
from natasha import (
    Segmenter,
    NewsEmbedding,
    NewsNERTagger,
    Doc
)

segmenter = Segmenter()
emb = NewsEmbedding()
ner_tagger = NewsNERTagger(emb)


ocr_reader = easyocr.Reader(['ru','en'], gpu=True)

""" names,surnames = [],[]

with open('datasets/fNames.txt', 'r', encoding='utf-8') as file:
    names.extend(file.read().splitlines())

with open('datasets/mNames.txt', 'r', encoding='utf-8') as file:
    names.extend(file.read().splitlines())

with open('datasets/mSurnames.txt', 'r', encoding='utf-8') as file:
    surnames.extend(file.read().splitlines()) """

GeminiAPIKEY = "AIzaSyANWdM_J5l99dr3i1wEiIikH_jN_VUSMp0"

#Gemini API —Ñ—É–Ω–∫—Ü–∏—è
def ask_gemini(user_input):

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GeminiAPIKEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{
            "parts": [{"text": user_input}]
        }]
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        if response.ok:
            result = response.json()
            answer = result["candidates"][0]["content"]["parts"][0]["text"]
            return answer
        else:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ API"
    except Exception as e:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏"

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("dark-blue")

HISTORY_FILE = "history.json"

#–∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def extract_text_from_image(file_path):
    try:
        with open(file_path, 'rb') as f:
            img_bytes = bytearray(f.read())
        img_array = np.asarray(img_bytes, dtype=np.uint8)

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        if img is None:
            return "[–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]"

        results = ocr_reader.readtext(img, detail=0)

        text = " ".join(results)
        print("text", text)
        return text
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}]"
    
#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
def extract_text_from_pdf(file_path):
    try:
        text = ""
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
        return text
    except Exception as e:
        return f"[–û—à–∏–±–∫–∞ PDF: {e}]"


#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ—ã
def anonymize_text(text):
    # –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 16 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–¥–µ—Ñ–∏—Å
    text = re.sub(r'(?:\d{4}[-\s]?){4}', '1111 2222 3333 4444', text)

    # –ò–ò–ù: 12 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
    text = re.sub(r'\b\d{12}\b', '111122223333', text)

    # –î–∞—Ç–∞: –≥–∏–±–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (01.01.2024, 01/01/2024, 01-01-2024 –∏ –¥–∞–∂–µ 1.1.24)
    text = re.sub(r'\b\d{1,2}[./-]\d{1,2}[./-]\d{2,4}\b', '01.01.2000', text)

    # –¢–µ–ª–µ—Ñ–æ–Ω (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å +7, 8, —Å–∫–æ–±–∫–∞–º–∏ –∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    text = re.sub(r'(\+?7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}', '+7 000 000 00 00', text)

    # –§–ò–û: –¥–æ —Ç—Ä—ë—Ö —Å–ª–æ–≤, —Å –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤, –≤–æ–∑–º–æ–∂–Ω–æ —Å –æ—Ç—á–µ—Å—Ç–≤–æ–º
    text = re.sub(r'\b[–ê-–Ø–Å][–∞-—è—ë]+(?: [–ê-–Ø–Å][–∞-—è—ë]+){1,2}\b', '–ù—É—Ä–æ–≤ –ù—É—Ä –ù—É—Ä–æ–≤–∏—á', text)

    return text

def ner_anonymize(text):
    doc = Doc(text)
    doc.segment(segmenter)
    doc.tag_ner(ner_tagger)

    spans = [span for span in doc.spans if span.type in {'PER', 'LOC', 'ORG', 'DATE'}]
    spans = sorted(spans, key=lambda span: span.start, reverse=True)

    for span in spans:
        if span.type == 'PER':
            replacement = '–ò–ú–Ø –§–ê–ú–ò–õ–ò–Ø'
        elif span.type == 'LOC':
            replacement = '–õ–û–ö–ê–¶–ò–Ø'
        elif span.type == 'ORG':
            replacement = '–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø'
        elif span.type == 'DATE':
            replacement = '01.01.2000'
        else:
            continue

        text = text[:span.start] + replacement + text[span.stop:]

    return text


#–∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class AnonymizerApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üõ°Ô∏è AnonAI")
        self.geometry("720x580")
        self.resizable(False, False)

        self.history = load_history()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_frame = ctk.CTkFrame(self)
        top_frame.pack(fill="x", padx=10, pady=(10, 5))

        self.description = ctk.CTkLabel(
            top_frame, 
            text="üõ°Ô∏è –¶–µ–Ω–∑—É—Ä–∏—Ä—É–µ—Ç –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò Gemini + NER",
            font=("Segoe UI", 16, "bold"),
            anchor="center"
        )
        self.description.pack(pady=5)

        # –û–∫–Ω–æ —á–∞—Ç–∞
        self.chat_log = ctk.CTkTextbox(self, width=680, height=380, font=("Segoe UI", 14), wrap="word")
        self.chat_log.pack(padx=10, pady=5)
        self.chat_log.configure(state="disabled")

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        bottom_frame = ctk.CTkFrame(self)
        bottom_frame.pack(fill="both", padx=10, pady=(5, 10))

        # –ü–æ–ª–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        self.entry = ctk.CTkTextbox(bottom_frame, height=80, width=540, font=("Segoe UI", 13), wrap="word")
        self.entry.pack(side="left", padx=(0, 5), pady=5)

        # –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞
        btn_frame = ctk.CTkFrame(bottom_frame, fg_color="transparent")
        btn_frame.pack(side="right", padx=0)

        self.send_btn = ctk.CTkButton(btn_frame, text="‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message, width=100, height=40, fg_color="green")
        self.send_btn.pack(pady=(0, 5))

        self.ocr_upload = ctk.CTkButton(btn_frame, text="üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/PDF", command=self.open_image, width=100, height=40)
        self.ocr_upload.pack(pady=(0, 5))

        self.clear_btn = ctk.CTkButton(btn_frame, text="üóë –ù–æ–≤—ã–π –ß–∞—Ç", command=self.new_chat, width=100, height=40, fg_color="red", hover_color="#8B0000")
        self.clear_btn.pack()

        self.display_history()


    #—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç (—É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π)
    def new_chat(self):
        self.chat_log.configure(state="normal")
        self.chat_log.delete("1.0", "end")
        self.chat_log.configure(state="disabled")
        self.history = []
        save_history(self.history)
        self.entry.delete(0, "end")

    def open_image(self):
        file_path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        filetypes=[
        ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png *.jpg *.jpeg"),
        ("PDF —Ñ–∞–π–ª—ã", "*.pdf")
    ])


        if file_path.lower().endswith('.pdf'):
            text = extract_text_from_pdf(file_path)
            if text:
                self.entry.delete("1.0", "end")
                self.entry.insert("1.0", text)
            else:
                print("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF")

        elif file_path.lower().endswith(('.png', '.jpg', '.jpeg')):
            text = extract_text_from_image(file_path)
            if text:
                self.entry.delete("1.0", "end")
                self.entry.insert("1.0", text)
            else:
                print("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG/PNG) –∏ PDF —Ñ–∞–π–ª—ã.")


    #–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
    def display_history(self):
        self.chat_log.configure(state="normal")
        for msg in self.history:
            self.chat_log.insert("end", f"üë®: {msg['input']}\nü§ñ: {msg['output']}\n\n")
        self.chat_log.configure(state="disabled")

        self.chat_log.yview_moveto(100000)

    #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    def send_message(self, event=None):
        user_input = self.entry.get("1.0", "end").strip()

        if not user_input:
            return
        
        user_input = anonymize_text(user_input)
        user_input = ner_anonymize(user_input)

        ai_input = f"–ü—Ä–æ–º–ø—Ç: {user_input} \n–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {str(self.history)}"

        bot_response = ask_gemini(ai_input)
        self.history.append({"input": user_input, "output": bot_response})
        save_history(self.history)

        self.chat_log.configure(state="normal")
        self.chat_log.insert("end", f"üë®: {user_input}\nü§ñ: {bot_response}\n\n")
        self.chat_log.configure(state="disabled")
        self.chat_log.see("end")
        self.entry.delete("1.0", "end")

#–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = AnonymizerApp()
    app.mainloop()
